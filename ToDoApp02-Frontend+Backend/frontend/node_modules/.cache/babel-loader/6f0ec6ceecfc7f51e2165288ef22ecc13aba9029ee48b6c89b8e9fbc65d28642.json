{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useCallback } from 'react';\nimport { todoApi } from '../services/api';\nimport { FILTER_STATUS } from '../utils/constants';\nexport const useTodos = () => {\n  _s();\n  const [todos, setTodos] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [filter, setFilter] = useState(FILTER_STATUS.ALL);\n  const [stats, setStats] = useState({\n    total: 0,\n    completed: 0,\n    pending: 0\n  });\n\n  // 获取待办事项列表\n  const fetchTodos = useCallback(async (status = filter) => {\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await todoApi.getTodos(status);\n      setTodos(response.todos);\n      setStats({\n        total: response.total,\n        completed: response.completed_count,\n        pending: response.pending_count\n      });\n    } catch (err) {\n      setError(err.message);\n      console.error('获取待办事项失败:', err);\n    } finally {\n      setLoading(false);\n    }\n  }, [filter]);\n\n  // 添加待办事项\n  const addTodo = useCallback(async todoData => {\n    try {\n      const newTodo = await todoApi.createTodo(todoData);\n      setTodos(prev => [...prev, newTodo]);\n      setStats(prev => ({\n        ...prev,\n        total: prev.total + 1,\n        pending: prev.pending + 1\n      }));\n      return newTodo;\n    } catch (err) {\n      setError(err.message);\n      console.error('添加待办事项失败:', err);\n      throw err;\n    }\n  }, []);\n\n  // 更新待办事项\n  const updateTodo = useCallback(async (id, updates) => {\n    try {\n      const updatedTodo = await todoApi.updateTodo(id, updates);\n      setTodos(prev => prev.map(todo => todo.id === id ? updatedTodo : todo));\n\n      // 更新统计信息\n      if (updates.completed !== undefined) {\n        setStats(prev => {\n          const oldTodo = todos.find(t => t.id === id);\n          if (!oldTodo) return prev;\n          const wasCompleted = oldTodo.completed;\n          const isCompleted = updates.completed;\n          if (wasCompleted && !isCompleted) {\n            return {\n              ...prev,\n              completed: prev.completed - 1,\n              pending: prev.pending + 1\n            };\n          } else if (!wasCompleted && isCompleted) {\n            return {\n              ...prev,\n              completed: prev.completed + 1,\n              pending: prev.pending - 1\n            };\n          }\n          return prev;\n        });\n      }\n      return updatedTodo;\n    } catch (err) {\n      setError(err.message);\n      console.error('更新待办事项失败:', err);\n      throw err;\n    }\n  }, [todos]);\n\n  // 删除待办事项\n  const deleteTodo = useCallback(async id => {\n    try {\n      await todoApi.deleteTodo(id);\n      const deletedTodo = todos.find(t => t.id === id);\n      setTodos(prev => prev.filter(todo => todo.id !== id));\n\n      // 更新统计信息\n      if (deletedTodo) {\n        setStats(prev => ({\n          ...prev,\n          total: prev.total - 1,\n          completed: deletedTodo.completed ? prev.completed - 1 : prev.completed,\n          pending: !deletedTodo.completed ? prev.pending - 1 : prev.pending\n        }));\n      }\n    } catch (err) {\n      setError(err.message);\n      console.error('删除待办事项失败:', err);\n      throw err;\n    }\n  }, [todos]);\n\n  // 清除已完成事项\n  const clearCompleted = useCallback(async () => {\n    try {\n      const response = await todoApi.clearCompleted();\n      setTodos(prev => prev.filter(todo => !todo.completed));\n      setStats(prev => ({\n        ...prev,\n        total: prev.total - prev.completed,\n        completed: 0\n      }));\n      return response;\n    } catch (err) {\n      setError(err.message);\n      console.error('清除已完成事项失败:', err);\n      throw err;\n    }\n  }, []);\n\n  // 清空所有事项\n  const clearAll = useCallback(async () => {\n    try {\n      const response = await todoApi.clearAll();\n      setTodos([]);\n      setStats({\n        total: 0,\n        completed: 0,\n        pending: 0\n      });\n      return response;\n    } catch (err) {\n      setError(err.message);\n      console.error('清空所有事项失败:', err);\n      throw err;\n    }\n  }, []);\n\n  // 切换筛选状态\n  const changeFilter = useCallback(newFilter => {\n    setFilter(newFilter);\n  }, []);\n\n  // 根据筛选状态获取显示的任务列表\n  const getFilteredTodos = useCallback(() => {\n    switch (filter) {\n      case FILTER_STATUS.COMPLETED:\n        return todos.filter(todo => todo.completed);\n      case FILTER_STATUS.PENDING:\n        return todos.filter(todo => !todo.completed);\n      default:\n        return todos;\n    }\n  }, [todos, filter]);\n\n  // 初始化加载\n  useEffect(() => {\n    fetchTodos();\n  }, [fetchTodos]);\n  return {\n    todos: getFilteredTodos(),\n    allTodos: todos,\n    loading,\n    error,\n    filter,\n    stats,\n    addTodo,\n    updateTodo,\n    deleteTodo,\n    clearCompleted,\n    clearAll,\n    changeFilter,\n    refreshTodos: fetchTodos\n  };\n};\n_s(useTodos, \"2y/agxTjcH5PpUSeGrv0cqV5ooQ=\");","map":{"version":3,"names":["useState","useEffect","useCallback","todoApi","FILTER_STATUS","useTodos","_s","todos","setTodos","loading","setLoading","error","setError","filter","setFilter","ALL","stats","setStats","total","completed","pending","fetchTodos","status","response","getTodos","completed_count","pending_count","err","message","console","addTodo","todoData","newTodo","createTodo","prev","updateTodo","id","updates","updatedTodo","map","todo","undefined","oldTodo","find","t","wasCompleted","isCompleted","deleteTodo","deletedTodo","clearCompleted","clearAll","changeFilter","newFilter","getFilteredTodos","COMPLETED","PENDING","allTodos","refreshTodos"],"sources":["D:/PRD PROJECT/ToDoApp02-system/frontend/src/hooks/useTodos.js"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\r\nimport { todoApi } from '../services/api';\r\nimport { FILTER_STATUS } from '../utils/constants';\r\n\r\nexport const useTodos = () => {\r\n  const [todos, setTodos] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const [filter, setFilter] = useState(FILTER_STATUS.ALL);\r\n  const [stats, setStats] = useState({\r\n    total: 0,\r\n    completed: 0,\r\n    pending: 0\r\n  });\r\n  \r\n  // 获取待办事项列表\r\n  const fetchTodos = useCallback(async (status = filter) => {\r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      const response = await todoApi.getTodos(status);\r\n      setTodos(response.todos);\r\n      setStats({\r\n        total: response.total,\r\n        completed: response.completed_count,\r\n        pending: response.pending_count\r\n      });\r\n    } catch (err) {\r\n      setError(err.message);\r\n      console.error('获取待办事项失败:', err);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [filter]);\r\n  \r\n  // 添加待办事项\r\n  const addTodo = useCallback(async (todoData) => {\r\n    try {\r\n      const newTodo = await todoApi.createTodo(todoData);\r\n      setTodos(prev => [...prev, newTodo]);\r\n      setStats(prev => ({\r\n        ...prev,\r\n        total: prev.total + 1,\r\n        pending: prev.pending + 1\r\n      }));\r\n      return newTodo;\r\n    } catch (err) {\r\n      setError(err.message);\r\n      console.error('添加待办事项失败:', err);\r\n      throw err;\r\n    }\r\n  }, []);\r\n  \r\n  // 更新待办事项\r\n  const updateTodo = useCallback(async (id, updates) => {\r\n    try {\r\n      const updatedTodo = await todoApi.updateTodo(id, updates);\r\n      setTodos(prev => prev.map(todo => \r\n        todo.id === id ? updatedTodo : todo\r\n      ));\r\n      \r\n      // 更新统计信息\r\n      if (updates.completed !== undefined) {\r\n        setStats(prev => {\r\n          const oldTodo = todos.find(t => t.id === id);\r\n          if (!oldTodo) return prev;\r\n          \r\n          const wasCompleted = oldTodo.completed;\r\n          const isCompleted = updates.completed;\r\n          \r\n          if (wasCompleted && !isCompleted) {\r\n            return {\r\n              ...prev,\r\n              completed: prev.completed - 1,\r\n              pending: prev.pending + 1\r\n            };\r\n          } else if (!wasCompleted && isCompleted) {\r\n            return {\r\n              ...prev,\r\n              completed: prev.completed + 1,\r\n              pending: prev.pending - 1\r\n            };\r\n          }\r\n          return prev;\r\n        });\r\n      }\r\n      \r\n      return updatedTodo;\r\n    } catch (err) {\r\n      setError(err.message);\r\n      console.error('更新待办事项失败:', err);\r\n      throw err;\r\n    }\r\n  }, [todos]);\r\n  \r\n  // 删除待办事项\r\n  const deleteTodo = useCallback(async (id) => {\r\n    try {\r\n      await todoApi.deleteTodo(id);\r\n      const deletedTodo = todos.find(t => t.id === id);\r\n      setTodos(prev => prev.filter(todo => todo.id !== id));\r\n      \r\n      // 更新统计信息\r\n      if (deletedTodo) {\r\n        setStats(prev => ({\r\n          ...prev,\r\n          total: prev.total - 1,\r\n          completed: deletedTodo.completed ? prev.completed - 1 : prev.completed,\r\n          pending: !deletedTodo.completed ? prev.pending - 1 : prev.pending\r\n        }));\r\n      }\r\n    } catch (err) {\r\n      setError(err.message);\r\n      console.error('删除待办事项失败:', err);\r\n      throw err;\r\n    }\r\n  }, [todos]);\r\n  \r\n  // 清除已完成事项\r\n  const clearCompleted = useCallback(async () => {\r\n    try {\r\n      const response = await todoApi.clearCompleted();\r\n      setTodos(prev => prev.filter(todo => !todo.completed));\r\n      setStats(prev => ({\r\n        ...prev,\r\n        total: prev.total - prev.completed,\r\n        completed: 0\r\n      }));\r\n      return response;\r\n    } catch (err) {\r\n      setError(err.message);\r\n      console.error('清除已完成事项失败:', err);\r\n      throw err;\r\n    }\r\n  }, []);\r\n  \r\n  // 清空所有事项\r\n  const clearAll = useCallback(async () => {\r\n    try {\r\n      const response = await todoApi.clearAll();\r\n      setTodos([]);\r\n      setStats({\r\n        total: 0,\r\n        completed: 0,\r\n        pending: 0\r\n      });\r\n      return response;\r\n    } catch (err) {\r\n      setError(err.message);\r\n      console.error('清空所有事项失败:', err);\r\n      throw err;\r\n    }\r\n  }, []);\r\n  \r\n  // 切换筛选状态\r\n  const changeFilter = useCallback((newFilter) => {\r\n    setFilter(newFilter);\r\n  }, []);\r\n  \r\n  // 根据筛选状态获取显示的任务列表\r\n  const getFilteredTodos = useCallback(() => {\r\n    switch (filter) {\r\n      case FILTER_STATUS.COMPLETED:\r\n        return todos.filter(todo => todo.completed);\r\n      case FILTER_STATUS.PENDING:\r\n        return todos.filter(todo => !todo.completed);\r\n      default:\r\n        return todos;\r\n    }\r\n  }, [todos, filter]);\r\n  \r\n  // 初始化加载\r\n  useEffect(() => {\r\n    fetchTodos();\r\n  }, [fetchTodos]);\r\n  \r\n  return {\r\n    todos: getFilteredTodos(),\r\n    allTodos: todos,\r\n    loading,\r\n    error,\r\n    filter,\r\n    stats,\r\n    addTodo,\r\n    updateTodo,\r\n    deleteTodo,\r\n    clearCompleted,\r\n    clearAll,\r\n    changeFilter,\r\n    refreshTodos: fetchTodos\r\n  };\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}