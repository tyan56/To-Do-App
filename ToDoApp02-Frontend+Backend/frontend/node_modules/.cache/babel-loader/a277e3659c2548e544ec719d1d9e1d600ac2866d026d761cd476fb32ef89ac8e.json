{"ast":null,"code":"const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000/api/v1';\nclass ApiService {\n  constructor(baseURL) {\n    this.baseURL = baseURL;\n  }\n  async request(endpoint, options = {}) {\n    const url = `${this.baseURL}${endpoint}`;\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        ...options.headers\n      },\n      ...options\n    };\n    try {\n      const response = await fetch(url, config);\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        throw new Error(errorData.detail || `HTTP error! status: ${response.status}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('API请求失败:', error);\n      throw error;\n    }\n  }\n  async getTodos(status = 'all', page = 1, limit = 50) {\n    return this.request(`/todos?status=${status}&page=${page}&limit=${limit}`);\n  }\n  async createTodo(todoData) {\n    return this.request('/todos', {\n      method: 'POST',\n      body: JSON.stringify(todoData)\n    });\n  }\n  async updateTodo(id, updates) {\n    return this.request(`/todos/${id}`, {\n      method: 'PUT',\n      body: JSON.stringify(updates)\n    });\n  }\n  async deleteTodo(id) {\n    return this.request(`/todos/${id}`, {\n      method: 'DELETE'\n    });\n  }\n  async clearCompleted() {\n    return this.request('/todos/completed', {\n      method: 'DELETE'\n    });\n  }\n  async clearAll() {\n    return this.request('/todos/all', {\n      method: 'DELETE'\n    });\n  }\n}\nexport const todoApi = new ApiService(API_BASE_URL);","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_URL","ApiService","constructor","baseURL","request","endpoint","options","url","config","headers","response","fetch","ok","errorData","json","catch","Error","detail","status","error","console","getTodos","page","limit","createTodo","todoData","method","body","JSON","stringify","updateTodo","id","updates","deleteTodo","clearCompleted","clearAll","todoApi"],"sources":["D:/PRD PROJECT/ToDoApp02-system/frontend/src/services/api.js"],"sourcesContent":["const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000/api/v1';\r\n\r\nclass ApiService {\r\n  constructor(baseURL) {\r\n    this.baseURL = baseURL;\r\n  }\r\n  \r\n  async request(endpoint, options = {}) {\r\n    const url = `${this.baseURL}${endpoint}`;\r\n    const config = {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        ...options.headers,\r\n      },\r\n      ...options,\r\n    };\r\n    \r\n    try {\r\n      const response = await fetch(url, config);\r\n      \r\n      if (!response.ok) {\r\n        const errorData = await response.json().catch(() => ({}));\r\n        throw new Error(errorData.detail || `HTTP error! status: ${response.status}`);\r\n      }\r\n      \r\n      return await response.json();\r\n    } catch (error) {\r\n      console.error('API请求失败:', error);\r\n      throw error;\r\n    }\r\n  }\r\n  \r\n  async getTodos(status = 'all', page = 1, limit = 50) {\r\n    return this.request(`/todos?status=${status}&page=${page}&limit=${limit}`);\r\n  }\r\n  \r\n  async createTodo(todoData) {\r\n    return this.request('/todos', {\r\n      method: 'POST',\r\n      body: JSON.stringify(todoData),\r\n    });\r\n  }\r\n  \r\n  async updateTodo(id, updates) {\r\n    return this.request(`/todos/${id}`, {\r\n      method: 'PUT',\r\n      body: JSON.stringify(updates),\r\n    });\r\n  }\r\n  \r\n  async deleteTodo(id) {\r\n    return this.request(`/todos/${id}`, {\r\n      method: 'DELETE',\r\n    });\r\n  }\r\n  \r\n  async clearCompleted() {\r\n    return this.request('/todos/completed', {\r\n      method: 'DELETE',\r\n    });\r\n  }\r\n  \r\n  async clearAll() {\r\n    return this.request('/todos/all', {\r\n      method: 'DELETE',\r\n    });\r\n  }\r\n}\r\n\r\nexport const todoApi = new ApiService(API_BASE_URL);\r\n"],"mappings":"AAAA,MAAMA,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,8BAA8B;AAEpF,MAAMC,UAAU,CAAC;EACfC,WAAWA,CAACC,OAAO,EAAE;IACnB,IAAI,CAACA,OAAO,GAAGA,OAAO;EACxB;EAEA,MAAMC,OAAOA,CAACC,QAAQ,EAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;IACpC,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACJ,OAAO,GAAGE,QAAQ,EAAE;IACxC,MAAMG,MAAM,GAAG;MACbC,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClC,GAAGH,OAAO,CAACG;MACb,CAAC;MACD,GAAGH;IACL,CAAC;IAED,IAAI;MACF,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAACJ,GAAG,EAAEC,MAAM,CAAC;MAEzC,IAAI,CAACE,QAAQ,CAACE,EAAE,EAAE;QAChB,MAAMC,SAAS,GAAG,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC,CAACC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QACzD,MAAM,IAAIC,KAAK,CAACH,SAAS,CAACI,MAAM,IAAI,uBAAuBP,QAAQ,CAACQ,MAAM,EAAE,CAAC;MAC/E;MAEA,OAAO,MAAMR,QAAQ,CAACI,IAAI,CAAC,CAAC;IAC9B,CAAC,CAAC,OAAOK,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,UAAU,EAAEA,KAAK,CAAC;MAChC,MAAMA,KAAK;IACb;EACF;EAEA,MAAME,QAAQA,CAACH,MAAM,GAAG,KAAK,EAAEI,IAAI,GAAG,CAAC,EAAEC,KAAK,GAAG,EAAE,EAAE;IACnD,OAAO,IAAI,CAACnB,OAAO,CAAC,iBAAiBc,MAAM,SAASI,IAAI,UAAUC,KAAK,EAAE,CAAC;EAC5E;EAEA,MAAMC,UAAUA,CAACC,QAAQ,EAAE;IACzB,OAAO,IAAI,CAACrB,OAAO,CAAC,QAAQ,EAAE;MAC5BsB,MAAM,EAAE,MAAM;MACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACJ,QAAQ;IAC/B,CAAC,CAAC;EACJ;EAEA,MAAMK,UAAUA,CAACC,EAAE,EAAEC,OAAO,EAAE;IAC5B,OAAO,IAAI,CAAC5B,OAAO,CAAC,UAAU2B,EAAE,EAAE,EAAE;MAClCL,MAAM,EAAE,KAAK;MACbC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACG,OAAO;IAC9B,CAAC,CAAC;EACJ;EAEA,MAAMC,UAAUA,CAACF,EAAE,EAAE;IACnB,OAAO,IAAI,CAAC3B,OAAO,CAAC,UAAU2B,EAAE,EAAE,EAAE;MAClCL,MAAM,EAAE;IACV,CAAC,CAAC;EACJ;EAEA,MAAMQ,cAAcA,CAAA,EAAG;IACrB,OAAO,IAAI,CAAC9B,OAAO,CAAC,kBAAkB,EAAE;MACtCsB,MAAM,EAAE;IACV,CAAC,CAAC;EACJ;EAEA,MAAMS,QAAQA,CAAA,EAAG;IACf,OAAO,IAAI,CAAC/B,OAAO,CAAC,YAAY,EAAE;MAChCsB,MAAM,EAAE;IACV,CAAC,CAAC;EACJ;AACF;AAEA,OAAO,MAAMU,OAAO,GAAG,IAAInC,UAAU,CAACJ,YAAY,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}