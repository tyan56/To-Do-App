{"ast":null,"code":"import axios from 'axios';\n\n// 创建axios实例\nconst api = axios.create({\n  baseURL: 'http://localhost:8000/api',\n  timeout: 5000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// 请求拦截器\napi.interceptors.request.use(config => {\n  var _config$method;\n  console.log('发送请求:', (_config$method = config.method) === null || _config$method === void 0 ? void 0 : _config$method.toUpperCase(), config.url);\n  return config;\n}, error => {\n  console.error('请求错误:', error);\n  return Promise.reject(error);\n});\n\n// 响应拦截器\napi.interceptors.response.use(response => {\n  console.log('收到响应:', response.status, response.data);\n  return response;\n}, error => {\n  var _error$response;\n  console.error('响应错误:', ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n  return Promise.reject(error);\n});\n\n// API服务类\nclass TodoAPI {\n  /**\r\n   * 获取待办事项列表\r\n   * @param {string} filterType - 过滤类型: 'all', 'active', 'completed'\r\n   * @returns {Promise} 待办事项列表\r\n   */\n  static async getTodos(filterType = 'all') {\n    try {\n      const response = await api.get('/todos', {\n        params: {\n          filter_type: filterType\n        }\n      });\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  /**\r\n   * 创建新的待办事项\r\n   * @param {Object} todoData - 待办事项数据\r\n   * @param {string} todoData.title - 标题\r\n   * @param {string} todoData.description - 描述（可选）\r\n   * @returns {Promise} 创建的待办事项\r\n   */\n  static async createTodo(todoData) {\n    try {\n      const response = await api.post('/todos', todoData);\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  /**\r\n   * 获取单个待办事项\r\n   * @param {number} id - 待办事项ID\r\n   * @returns {Promise} 待办事项详情\r\n   */\n  static async getTodo(id) {\n    try {\n      const response = await api.get(`/todos/${id}`);\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  /**\r\n   * 更新待办事项\r\n   * @param {number} id - 待办事项ID\r\n   * @param {Object} updateData - 更新数据\r\n   * @returns {Promise} 更新后的待办事项\r\n   */\n  static async updateTodo(id, updateData) {\n    try {\n      const response = await api.put(`/todos/${id}`, updateData);\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  /**\r\n   * 切换待办事项完成状态\r\n   * @param {number} id - 待办事项ID\r\n   * @returns {Promise} 更新后的待办事项\r\n   */\n  static async toggleTodo(id) {\n    try {\n      const response = await api.patch(`/todos/${id}/toggle`);\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  /**\r\n   * 删除待办事项\r\n   * @param {number} id - 待办事项ID\r\n   * @returns {Promise} 删除结果\r\n   */\n  static async deleteTodo(id) {\n    try {\n      const response = await api.delete(`/todos/${id}`);\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  /**\r\n   * 批量删除已完成的待办事项\r\n   * @returns {Promise} 删除结果\r\n   */\n  static async clearCompleted() {\n    try {\n      const response = await api.delete('/todos/batch/completed');\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  /**\r\n   * 清除所有待办事项\r\n   * @returns {Promise} 删除结果\r\n   */\n  static async clearAll() {\n    try {\n      const response = await api.delete('/todos/batch/all');\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  /**\r\n   * 统一错误处理\r\n   * @param {Error} error - 错误对象\r\n   * @returns {Error} 处理后的错误\r\n   */\n  static handleError(error) {\n    if (error.response) {\n      var _data$error;\n      // 服务器返回错误状态码\n      const {\n        status,\n        data\n      } = error.response;\n      const message = (data === null || data === void 0 ? void 0 : (_data$error = data.error) === null || _data$error === void 0 ? void 0 : _data$error.message) || (data === null || data === void 0 ? void 0 : data.message) || `HTTP ${status} 错误`;\n      return new Error(message);\n    } else if (error.request) {\n      // 网络错误\n      return new Error('网络连接失败，请检查服务器是否运行');\n    } else {\n      // 其他错误\n      return new Error(error.message || '未知错误');\n    }\n  }\n}\nexport default TodoAPI;","map":{"version":3,"names":["axios","api","create","baseURL","timeout","headers","interceptors","request","use","config","_config$method","console","log","method","toUpperCase","url","error","Promise","reject","response","status","data","_error$response","message","TodoAPI","getTodos","filterType","get","params","filter_type","handleError","createTodo","todoData","post","getTodo","id","updateTodo","updateData","put","toggleTodo","patch","deleteTodo","delete","clearCompleted","clearAll","_data$error","Error"],"sources":["D:/PRD PROJECT/TodoApp01/front/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// 创建axios实例\r\nconst api = axios.create({\r\n  baseURL: 'http://localhost:8000/api',\r\n  timeout: 5000,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// 请求拦截器\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    console.log('发送请求:', config.method?.toUpperCase(), config.url);\r\n    return config;\r\n  },\r\n  (error) => {\r\n    console.error('请求错误:', error);\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// 响应拦截器\r\napi.interceptors.response.use(\r\n  (response) => {\r\n    console.log('收到响应:', response.status, response.data);\r\n    return response;\r\n  },\r\n  (error) => {\r\n    console.error('响应错误:', error.response?.data || error.message);\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// API服务类\r\nclass TodoAPI {\r\n  /**\r\n   * 获取待办事项列表\r\n   * @param {string} filterType - 过滤类型: 'all', 'active', 'completed'\r\n   * @returns {Promise} 待办事项列表\r\n   */\r\n  static async getTodos(filterType = 'all') {\r\n    try {\r\n      const response = await api.get('/todos', {\r\n        params: { filter_type: filterType }\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      throw this.handleError(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 创建新的待办事项\r\n   * @param {Object} todoData - 待办事项数据\r\n   * @param {string} todoData.title - 标题\r\n   * @param {string} todoData.description - 描述（可选）\r\n   * @returns {Promise} 创建的待办事项\r\n   */\r\n  static async createTodo(todoData) {\r\n    try {\r\n      const response = await api.post('/todos', todoData);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw this.handleError(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 获取单个待办事项\r\n   * @param {number} id - 待办事项ID\r\n   * @returns {Promise} 待办事项详情\r\n   */\r\n  static async getTodo(id) {\r\n    try {\r\n      const response = await api.get(`/todos/${id}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw this.handleError(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 更新待办事项\r\n   * @param {number} id - 待办事项ID\r\n   * @param {Object} updateData - 更新数据\r\n   * @returns {Promise} 更新后的待办事项\r\n   */\r\n  static async updateTodo(id, updateData) {\r\n    try {\r\n      const response = await api.put(`/todos/${id}`, updateData);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw this.handleError(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 切换待办事项完成状态\r\n   * @param {number} id - 待办事项ID\r\n   * @returns {Promise} 更新后的待办事项\r\n   */\r\n  static async toggleTodo(id) {\r\n    try {\r\n      const response = await api.patch(`/todos/${id}/toggle`);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw this.handleError(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 删除待办事项\r\n   * @param {number} id - 待办事项ID\r\n   * @returns {Promise} 删除结果\r\n   */\r\n  static async deleteTodo(id) {\r\n    try {\r\n      const response = await api.delete(`/todos/${id}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw this.handleError(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 批量删除已完成的待办事项\r\n   * @returns {Promise} 删除结果\r\n   */\r\n  static async clearCompleted() {\r\n    try {\r\n      const response = await api.delete('/todos/batch/completed');\r\n      return response.data;\r\n    } catch (error) {\r\n      throw this.handleError(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 清除所有待办事项\r\n   * @returns {Promise} 删除结果\r\n   */\r\n  static async clearAll() {\r\n    try {\r\n      const response = await api.delete('/todos/batch/all');\r\n      return response.data;\r\n    } catch (error) {\r\n      throw this.handleError(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 统一错误处理\r\n   * @param {Error} error - 错误对象\r\n   * @returns {Error} 处理后的错误\r\n   */\r\n  static handleError(error) {\r\n    if (error.response) {\r\n      // 服务器返回错误状态码\r\n      const { status, data } = error.response;\r\n      const message = data?.error?.message || data?.message || `HTTP ${status} 错误`;\r\n      return new Error(message);\r\n    } else if (error.request) {\r\n      // 网络错误\r\n      return new Error('网络连接失败，请检查服务器是否运行');\r\n    } else {\r\n      // 其他错误\r\n      return new Error(error.message || '未知错误');\r\n    }\r\n  }\r\n}\r\n\r\nexport default TodoAPI;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}